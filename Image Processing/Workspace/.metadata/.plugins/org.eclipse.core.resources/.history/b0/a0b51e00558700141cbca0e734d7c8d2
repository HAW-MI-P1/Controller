package common;

import java.io.*;
import java.net.*;
import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.imgcodecs.*;
import org.opencv.imgproc.*;

public class OpenCVImageDecoder 
{

	private static final double MAGNITUDE                         = 30.0;
	private static final double MINIMAL_MATCH_PERCENTAGE          = 50.0;
	private static final double MINIMAL_NEEDED_MATCHES_PERCENTAGE = 60.0;
	private static final double MINIMAL_THRESHOLD                 = -15000000.0;
	
	public static void main(String[] args) throws MalformedURLException 
	{
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
		
		OpenCVImageDecoder imageDecoder = new OpenCVImageDecoder();
		String     searchString         = null;
		URL        url                  = null;
		WebPicture picture              = null;
		
		//////////////////////////////////
		// BEGIN Test 1: lion on lion picture
		//////////////////////////////////
		searchString = "lion";
		url          = new URL("http://gowild.wwf.org.uk/wp-content/uploads/factfiles_lion_01.jpg");
		picture      = new WebPicture(url);
		
		try
		{
			System.out.println("[IMAGE_DECODER] Search for: "           + searchString + " in " + url.toString());
			System.out.println("[IMAGE_DECODER] Found enaugh matches: " + imageDecoder.foundObjectInImage(picture, searchString));
		}
		catch(IOException e)
		{
			System.out.println("[IMAGE_DECODER] Source imgae cant be readed from the internet.");
			throw new IllegalArgumentException("[IMAGE_DECODER]  Source imgae cant be readed from the internet.");
		}
		
		System.out.println();
		//////////////////////////////////
		// END Test 1: lion on lion picture
		//////////////////////////////////
		
		
		
		//////////////////////////////////
		// BEGIN Test 2: lena on car picture
		//////////////////////////////////
		searchString = "lena";
		url          = new URL("http://www.sixt.com/uploads/pics/mercedes_slk-sixt_rent_a_car.png");
		picture      = new WebPicture(url);
		
		try
		{
		System.out.println("[IMAGE_DECODER] Search for: "           + searchString + " in " + url.toString());
		System.out.println("[IMAGE_DECODER] Found enaugh matches: " + imageDecoder.foundObjectInImage(picture, searchString));
		}
		catch(IOException e)
		{
		System.out.println("[IMAGE_DECODER] Source imgae cant be readed from the internet.");
		throw new IllegalArgumentException("[IMAGE_DECODER]  Source imgae cant be readed from the internet.");
		}
		
		System.out.println();
		//////////////////////////////////
		// END Test 2: lena on car picture
		//////////////////////////////////
		
		
		
		//////////////////////////////////
		// BEGIN Test 3: lena on lena picture
		//////////////////////////////////
		searchString = "lena";
		url          = new URL("http://www.cs.cmu.edu/~chuck/lennapg/len_std.jpg");
		picture      = new WebPicture(url);
		
		try
		{
			System.out.println("[IMAGE_DECODER] Search for: "           + searchString + " in " + url.toString());
			System.out.println("[IMAGE_DECODER] Found enaugh matches: " + imageDecoder.foundObjectInImage(picture, searchString));
		}
		catch(IOException e)
		{
			System.out.println("[IMAGE_DECODER] Source imgae cant be readed from the internet.");
			throw new IllegalArgumentException("[IMAGE_DECODER]  Source imgae cant be readed from the internet.");
		}
		
		System.out.println();
		//////////////////////////////////
		// END Test 3: lena on lena picture
		//////////////////////////////////
		
		
		
		//////////////////////////////////
		// BEGIN Test 4: elephant on lena picture
		//////////////////////////////////
		searchString = "elephant";
		url          = new URL("http://www.cs.cmu.edu/~chuck/lennapg/len_std.jpg");
		picture      = new WebPicture(url);
		
		try
		{
			System.out.println("[IMAGE_DECODER] Search for: "           + searchString + " in " + url.toString());
			System.out.println("[IMAGE_DECODER] Found enaugh matches: " + imageDecoder.foundObjectInImage(picture, searchString));
		}
		catch(IOException e)
		{
			System.out.println("[IMAGE_DECODER] Source imgae cant be readed from the internet.");
			throw new IllegalArgumentException("[IMAGE_DECODER]  Source imgae cant be readed from the internet.");
		}
		//////////////////////////////////
		// END Test 4: elephant on lena picture
		//////////////////////////////////
	}
	
	//////////////////////////////////
	//////////////////////////////////
	////////CLASS BEGINS HERE/////////
	//////////////////////////////////
	//////////////////////////////////
	public OpenCVImageDecoder()
	{
		
	}

	// check for matches
	public boolean foundObjectInImage(WebPicture picture, String object) throws IOException
	{
		Point[]  locations;
		File     folder    = new File("images/" + object);
		String   file      = picture.pictureToFile();
		Mat      source    = Imgcodecs.imread(file);
		
		if(source.empty())
		{
			System.out.println("[IMAGE_DECODER] Empty source image.");
			throw new IllegalArgumentException("[IMAGE_DECODER] Empty source image.");
		}
		
		if(!folder.exists())
		{
			System.out.println("[IMAGE_DECODER] No images for the search string available.");
			throw new IllegalArgumentException("[IMAGE_DECODER] No images for the search string available.");
		}
		
		if(folder.listFiles().length <= 0)
		{
			System.out.println("[IMAGE_DECODER] No images for the search string available.");
			throw new IllegalArgumentException("[IMAGE_DECODER] No images for the search string available.");
		}
		
		locations = new Point[folder.listFiles().length];
		
		for(int i = 0; i < folder.listFiles().length; i++)
		{
			System.out.println("[IMAGE_DECODER] " + folder.listFiles()[i].getPath());
			Mat template = Imgcodecs.imread(folder.listFiles()[i].getPath());
			
			if(template.empty())
			{
				System.out.println("[IMAGE_DECODER] Empty template image.");
				throw new IllegalArgumentException("[IMAGE_DECODER] Empty template image.");
			}
			
			locations[i] = imageMatching(source, template);
		}
		
		// check match count
		int    matchCount          = 0;
		double matchCountInPercent = 0.0;
		for (int i = 0; i < locations.length; i++) 
		{
			if(locations[i] != null)
			{
				matchCount++;
			}
		}
		
		matchCountInPercent = (100.0 / (double)folder.listFiles().length) * matchCount;
		System.out.println("[IMAGE_DECODER] " + matchCountInPercent + " % matches (count: " + matchCount + ")");
		
		if(matchCountInPercent >= OpenCVImageDecoder.MINIMAL_NEEDED_MATCHES_PERCENTAGE)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	// return location when something was found and it was a good match, else null
	private Point imageMatching(Mat source, Mat template)
	{
		//TODO source greater than template -> resize?
		if(source.cols() < template.cols())
		{}
		
		if(source.rows() < template.rows())
		{}
		
		Mat sourcePolar                = new Mat(source.rows(), source.cols(), source.type());
		Mat templatePolar              = new Mat(template.rows(), template.cols(), template.type());
		Mat matchResult                = new Mat();
		Mat threshold                  = new Mat();
		MinMaxLocResult minMaxLocation = new MinMaxLocResult();
		Point location                 = new Point();
		
		
		// transform data to polar coordinates
		Imgproc.logPolar(source, sourcePolar,  new Point(source.cols() * 0.5, source.rows() * 0.5), 
				OpenCVImageDecoder.MAGNITUDE, Imgproc.INTER_LINEAR + Imgproc.CV_WARP_FILL_OUTLIERS);

        Imgproc.logPolar(template, templatePolar, new Point(template.cols() * 0.5, template.rows() * 0.5), 
        		OpenCVImageDecoder.MAGNITUDE, Imgproc.INTER_LINEAR + Imgproc.CV_WARP_FILL_OUTLIERS);
		
		// matching, normalize and create binary image
		Imgproc.matchTemplate(sourcePolar, templatePolar, matchResult, Imgproc.TM_CCOEFF);
		Core.normalize(matchResult, matchResult, 0, 1, Core.NORM_MINMAX, -1, new Mat());
		Imgproc.threshold(matchResult, threshold, 0.5, 255, 0);

		// find best match
		minMaxLocation = Core.minMaxLoc(matchResult);
		
		// method = Imgproc.TM_SQDIFF || Imgproc.TM_SQDIFF_NORMED
		// location = minMaxLocation.minLoc;
		// else
		location = minMaxLocation.maxLoc;

		// cut out relevant position, calculate width/height
		/*int    matchedPoints        = 0;
		double matchedPointsPercent = 0;
		int    locationWidth        = ((int)location.x + template.cols() > threshold.cols() ? 
				threshold.cols() - (int)location.x : template.cols());
		int    locationheight       = ((int)location.y + template.rows() > threshold.rows() ? 
				threshold.rows() - (int)location.y : template.rows());
		Mat    locationImage        = new Mat(locationheight, locationWidth, threshold.type());
		Rect   locationRect         = new Rect((int)location.x, (int)location.y, locationWidth, locationheight);
		
		locationImage = threshold.submat(locationRect);
		
		// rate match
		for (int i = 0; i < locationImage.cols(); i++) 
		{
			for (int j = 0; j < locationImage.rows(); j++) 
			{
				if((int)locationImage.get(j, i)[0] == 255)
				{
					matchedPoints++;
				}
			}
		}
		
		matchedPointsPercent = (100.0 / ((double)locationImage.cols() * (double)locationImage.rows())) * 
				(double)matchedPoints;*/
		
		// Complete image dump?
		/*
		Imgcodecs.imwrite("dump/source.jpg",        source);
		Imgcodecs.imwrite("dump/template.jpg",      template);
		Imgcodecs.imwrite("dump/sourcePolar.jpg",   sourcePolar);
		Imgcodecs.imwrite("dump/templatePolar.jpg", templatePolar);
		Imgcodecs.imwrite("dump/threshold.jpg",     threshold);
		Imgcodecs.imwrite("dump/locationImage.jpg", locationImage);
		System.out.println(matchedPointsPercent);
		*/
		
		/*if(matchedPointsPercent < OpenCVImageDecoder.MINIMAL_MATCH_PERCENTAGE)
		{
			return null;
		}*/
		
		if(minMaxLocation.minVal > MINIMAL_THRESHOLD)
		{
			return null;
		}
		
		return location;
	}
}
